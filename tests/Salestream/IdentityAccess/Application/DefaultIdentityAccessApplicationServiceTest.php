<?php

use PHPUnit\Framework\TestCase;
use Mockery as m;

use Salestream\IdentityAccess\Application\Command\Identity\RegisterUser;
use Salestream\IdentityAccess\Application\DefaultIdentityAccessApplicationService;
use Salestream\IdentityAccess\Application\Response\UserDetails;
use Salestream\IdentityAccess\Domain\Model\Identity\Tenant;
use Salestream\IdentityAccess\Domain\Model\Identity\User;
use Salestream\IdentityAccess\Domain\Model\Identity\Email;
use Salestream\IdentityAccess\Domain\Model\Identity\Person;
use Salestream\IdentityAccess\Domain\Model\Identity\Name;
use Salestream\IdentityAccess\Domain\Model\AuthenticationService;

class DefaultIdentityAccessApplicationServiceTest extends TestCase
{
    const TENANT_ID  = '601219e-8e9e-43b9-b210-962c93764af7';
    const TENANT_ACTIVE = 1;
    const TENANT_INACTIVE = 0;
    const COMPANY = 'Salestream Software, Inc';
    const DESCRIPTION = 'The default tenant';
    const TENANT_VERSION = 1;

    const USER_ID         = 'b09255b4-4d32-11e6-beb8-9e71128cae77';
    const USER_TENANT_ID  = self::TENANT_ID;
    const EMAIL      = 'rreed@salestreamsoft.com';
    const PASSWORD   = 'Abcd1234';
    const PASSWORD_HASH = '$2y$10$aptuJtWzeUSohfAWTfZD.ef5DH1usPhqFn0couxG58Vtb7Xo7iEzm';
    const FIRST_NAME = 'Ricky';
    const LAST_NAME  = 'Reed';
    const USER_ENABLED = 1;
    const USER_VERSION    = 1;

    const DUPLICATE_EMAIL = 'jorden@gmail.com';

    public function setUp()
    { }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub


        m::close();
    }

    public function test_can_create_instance_of_identity_access_application_service()
    {
        $mockEncryptionService = m::mock('Salestream\IdentityAccess\Domain\Model\EncryptionService');
        $mockTenantRepository  = m::mock('Salestream\IdentityAccess\Domain\Model\TenantRepository');
        $mockUserRepository    = m::mock('Salestream\IdentityAccess\Domain\Model\UserRepository');

        $authenticationService = new AuthenticationService($mockEncryptionService, $mockTenantRepository);

        $identityAccessApplicationService = new DefaultIdentityAccessApplicationService($authenticationService, $mockEncryptionService, $mockTenantRepository, $mockUserRepository);

        $this->assertTrue($identityAccessApplicationService instanceof Salestream\IdentityAccess\Application\IdentityAccessApplicationService);
    }

    public function test_can_register_account()
    {
        $tenant = $this->getActiveTenant();

        $mockEncryptionService = m::mock('Salestream\IdentityAccess\Domain\Model\EncryptionService');
        $mockEncryptionService->shouldReceive('hashPassword')
            ->times(1)
            ->andReturn(self::PASSWORD_HASH);

        $mockTenantRepository = m::mock('Salestream\IdentityAccess\Domain\Model\TenantRepository');
        $mockTenantRepository->shouldReceive('findTenantAndUsersById')
            ->times(1)
            ->andReturn($tenant);

        $mockUserRepository = m::mock('Salestream\IdentityAccess\Domain\Model\UserRepository');
        $mockUserRepository->shouldReceive('nextIdentity')
            ->times(1)
            ->andReturn('b09255b4-4d32-11e6-beb8-9e71128cae77');

        $mockUserRepository->shouldReceive('add')
            ->times(1)
            ->andReturn(true);

        $authenticationService = new AuthenticationService($mockEncryptionService, $mockTenantRepository);

        $identityAccessApplicationService = new DefaultIdentityAccessApplicationService($authenticationService, $mockEncryptionService, $mockTenantRepository, $mockUserRepository);

        try {
            $success = $identityAccessApplicationService->registerUser(new RegisterUser(self::TENANT_ID, self::EMAIL, self::PASSWORD, self::FIRST_NAME, self::LAST_NAME));
        } catch(\Exception $e) {
            echo 'Exception: ' . $e->getMessage();
            $this->assertTrue(false, 'IdentityAccessApplicationService::register throw an exception');
        }

        $this->assertTrue($success);
    }

    /**
     * @expectedException Salestream\IdentityAccess\Exception\TenantNotFound
     */
    public function test_will_throw_a_tenant_not_found_exception()
    {
        $mockEncryptionService = m::mock('Salestream\IdentityAccess\Domain\Model\EncryptionService');

        $mockTenantRepository = m::mock('Salestream\IdentityAccess\Domain\Model\TenantRepository');
        $mockTenantRepository->shouldReceive('findTenantAndUsersById')
            ->times(1)
            ->andReturnNull();

        $mockUserRepository = m::mock('Salestream\IdentityAccess\Domain\Model\UserRepository');

        $authenticationService = new AuthenticationService($mockEncryptionService, $mockTenantRepository);

        $identityAccessApplicationService = new DefaultIdentityAccessApplicationService($authenticationService, $mockEncryptionService, $mockTenantRepository, $mockUserRepository);

        $identityAccessApplicationService->registerUser(new RegisterUser(self::TENANT_ID, self::EMAIL, self::PASSWORD, self::FIRST_NAME, self::LAST_NAME));
    }

    /**
     * @expectedException \Exception
     */
    public function test_will_throw_an_exception_when_the_user_password_cannot_be_encrypted()
    {
        $tenant = $this->getActiveTenant();

        $mockEncryptionService = m::mock('Salestream\IdentityAccess\Domain\Model\EncryptionService');
        $mockEncryptionService->shouldReceive('hashPassword')
            ->times(1)
            ->andReturn(false);

        $mockTenantRepository = m::mock('Salestream\IdentityAccess\Domain\Model\TenantRepository');
        $mockTenantRepository->shouldReceive('findTenantAndUsersById')
            ->times(1)
            ->andReturn($tenant);

        $mockUserRepository = m::mock('Salestream\IdentityAccess\Domain\Model\UserRepository');
        $mockUserRepository->shouldReceive('nextIdentity')
            ->times(1)
            ->andReturn(self::USER_ID);

        $authenticationService = new AuthenticationService($mockEncryptionService, $mockTenantRepository);

        $identityAccessApplicationService = new DefaultIdentityAccessApplicationService($authenticationService, $mockEncryptionService, $mockTenantRepository, $mockUserRepository);

        $identityAccessApplicationService->registerUser(new RegisterUser(self::TENANT_ID, self::EMAIL, self::PASSWORD, self::FIRST_NAME, self::LAST_NAME));
    }

    /**
     * @expectedException Salestream\IdentityAccess\Exception\InactiveTenant
     */
    public function test_will_throw_an_in_active_tenant_exception()
    {
        $tenant = $this->getInActiveTenant();

        $mockEncryptionService = m::mock('Salestream\IdentityAccess\Domain\Model\EncryptionService');
        $mockEncryptionService->shouldReceive('hashPassword')
            ->times(1);

        $mockTenantRepository = m::mock('Salestream\IdentityAccess\Domain\Model\TenantRepository');
        $mockTenantRepository->shouldReceive('findTenantAndUsersById')
            ->times(1)
            ->andReturn($tenant);

        $mockUserRepository = m::mock('Salestream\IdentityAccess\Domain\Model\UserRepository');
        $mockUserRepository->shouldReceive('nextIdentity')
            ->times(1)
            ->andReturn(self::USER_ID);

        $authenticationService = new AuthenticationService($mockEncryptionService, $mockTenantRepository);

        $identityAccessApplicationService = new DefaultIdentityAccessApplicationService($authenticationService, $mockEncryptionService, $mockTenantRepository, $mockUserRepository);

        $identityAccessApplicationService->registerUser(new RegisterUser(self::TENANT_ID, self::EMAIL, self::PASSWORD, self::FIRST_NAME, self::LAST_NAME));
    }

    /**
     * @expectedException Salestream\IdentityAccess\Exception\EmailNotUniqueForTenant
     */
    public function test_will_throw_email_not_unique_for_tenant_exception()
    {
        $tenant = $this->getActiveTenant();

        $mockEncryptionService = m::mock('Salestream\IdentityAccess\Domain\Model\EncryptionService');
        $mockEncryptionService->shouldReceive('hashPassword')
            ->times(1);

        $mockTenantRepository = m::mock('Salestream\IdentityAccess\Domain\Model\TenantRepository');
        $mockTenantRepository->shouldReceive('findTenantAndUsersById')
            ->times(1)
            ->andReturn($tenant);

        $mockUserRepository = m::mock('Salestream\IdentityAccess\Domain\Model\UserRepository');
        $mockUserRepository->shouldReceive('nextIdentity')
            ->times(1)
            ->andReturn(self::USER_ID);

        $authenticationService = new AuthenticationService($mockEncryptionService, $mockTenantRepository);

        $identityAccessApplicationService = new DefaultIdentityAccessApplicationService($authenticationService, $mockEncryptionService, $mockTenantRepository, $mockUserRepository);

        $identityAccessApplicationService->registerUser(new RegisterUser(self::TENANT_ID, self::DUPLICATE_EMAIL, self::PASSWORD, self::FIRST_NAME, self::LAST_NAME));
    }

    private function getActiveTenant()
    {
        return new Tenant(self::TENANT_ID, self::COMPANY, self::DESCRIPTION, self::TENANT_ACTIVE, self::TENANT_VERSION, $this->getUsersForTenant());
    }

    private function getInActiveTenant()
    {
        return new Tenant(self::TENANT_ID, self::COMPANY, self::DESCRIPTION, self::TENANT_INACTIVE, self::TENANT_VERSION, $this->getUsersForTenant());
    }

    private function getUsersForTenant()
    {
        $users = [];

        $user1 = new User('cbb5fddc-4dcd-11e6-beb8-9e71128cae77', self::TENANT_ID, new Email('eneisha@gmail.com'), self::PASSWORD_HASH, User::ENABLED, 1, new Person('cbb5fddc-4dcd-11e6-beb8-9e71128cae77', new Name('Eneisha', 'Reed'), 1));
        $user2 = new User('cbb60520-4dcd-11e6-beb8-9e71128cae77', self::TENANT_ID, new Email('jorden@gmail.com'), self::PASSWORD_HASH, User::ENABLED, 1, new Person('cbb60520-4dcd-11e6-beb8-9e71128cae77', new Name('Jorden', 'Reed'), 1));
        $user3 = new User('cbb60796-4dcd-11e6-beb8-9e71128cae77', self::TENANT_ID, new Email('jaidynn@gmail.com'), self::PASSWORD_HASH, User::ENABLED, 1, new Person('cbb60796-4dcd-11e6-beb8-9e71128cae77', new Name('Jaidynn', 'Reed'), 1));
        $user4 = new User('cbb60976-4dcd-11e6-beb8-9e71128cae77', self::TENANT_ID, new Email('jacob@gmail.com'), self::PASSWORD_HASH, User::ENABLED, 1, new Person('cbb60976-4dcd-11e6-beb8-9e71128cae77', new Name('Jacob', 'Reed'), 1));
        $user5 = new User('cbb60b24-4dcd-11e6-beb8-9e71128cae77', self::TENANT_ID, new Email('joel@yahoo.com'), self::PASSWORD_HASH, User::ENABLED, 1, new Person('cbb60b24-4dcd-11e6-beb8-9e71128cae77', new Name('Joel', 'Reed'), 1));

        $users[] = $user1;
        $users[] = $user2;
        $users[] = $user3;
        $users[] = $user4;
        $users[] = $user5;

        return $users;
    }
}